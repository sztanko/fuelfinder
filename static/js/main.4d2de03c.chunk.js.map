{"version":3,"sources":["lib/data.js","lib/geo.js","components/UpdateForm.jsx","components/StationRow.jsx","components/StationList.jsx","App.js","reportWebVitals.js","index.js"],"names":["SAVE_URL","process","REACT_APP_SAVE_API_URL","haversineDistance","lon1","lat1","lon2","lat2","isMiles","toRadian","angle","Math","PI","distance","a","b","dLat","dLon","pow","sin","cos","c","asin","sqrt","finalDistance","findNearestStations","lonlat","stations","maxDistance","filter","station","coords","sort","s1","s2","UpdateForm","props","stationId","useState","undefined","petrol","setPetrol","diesel","setDiesel","queue","setQueue","msg","setMsg","className","Row","Col","Alert","variant","Form","onSubmit","e","preventDefault","console","log","data","callback","axios","post","then","saveStation","id","Group","as","controlId","Label","column","sm","Check","inline","label","name","type","checked","onChange","value","Range","min","max","step","event","target","Button","getFuelConfidenceScore","m5","m30","m5_total","yes","no","m30_total","m5_strength","m30_strength","getLabelForConfidence","confidence","abs","StationRow","last_update","phone","address","stats","isFormVisible","setFormVisible","userLocation","myGmapsLocation","mapUrl","dieselConfidence","dieselLabel","dieselVariant","petrolConfidence","petrolLabel","petrolVariant","lastUpdate","round","Date","getTime","href","ceil","Badge","bg","size","onClick","StationList","updateMinutesAgo","stationElemennts","map","App","setStations","nearestStations","setNearestStations","loadError","setLoadError","position","setPosition","error","setError","latitude","longitude","onError","message","useEffect","geo","navigator","geolocation","watcher","watchPosition","clearWatch","usePosition","errorCallback","result","get","catch","stationData","station_data","content","Container","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4d2de03c.chunk.js","sourcesContent":["import axios from \"axios\";\nconst STATIONS_URL = \"stations.json\";\nconst SAVE_URL = process.env.REACT_APP_SAVE_API_URL;\nconst loadStations = (callback, errorCallback) => {\n  axios.get(STATIONS_URL).then(callback).catch(errorCallback);\n};\n\nconst saveStation = (data, callback) => {\n  axios.post(SAVE_URL, data).then(callback);\n};\n\nexport { loadStations, saveStation };\n","import { useState, useEffect } from \"react\";\n\nconst RADIUS_OF_EARTH_IN_KM = 6371;\n// const X_RANGE = 0.2;\n// const y_RANGE = 0.2;\n\n/**\n * Calculates the haversine distance between point A, and B.\n * @param {number[]} latlngA [lng, lat] point A\n * @param {number[]} latlngB [lng, lat] point B\n * @param {boolean} isMiles If we are using miles, else km.\n */\nconst haversineDistance = ([lon1, lat1], [lon2, lat2], isMiles = true) => {\n  const toRadian = (angle) => (Math.PI / 180) * angle;\n  const distance = (a, b) => (Math.PI / 180) * (a - b);\n\n  const dLat = distance(lat2, lat1);\n  const dLon = distance(lon2, lon1);\n\n  lat1 = toRadian(lat1);\n  lat2 = toRadian(lat2);\n\n  // Haversine Formula\n  const a =\n    Math.pow(Math.sin(dLat / 2), 2) +\n    Math.pow(Math.sin(dLon / 2), 2) * Math.cos(lat1) * Math.cos(lat2);\n  const c = 2 * Math.asin(Math.sqrt(a));\n\n  let finalDistance = RADIUS_OF_EARTH_IN_KM * c;\n\n  if (isMiles) {\n    finalDistance /= 1.60934;\n  }\n\n  return finalDistance;\n};\n\nconst findNearestStations = (lonlat, stations, maxDistance) => {\n  const out = stations.filter(\n    (station) => haversineDistance(lonlat, station.coords) < maxDistance\n  );\n\n  return out.sort(\n    (s1, s2) =>\n      haversineDistance(lonlat, s1.coords) -\n      haversineDistance(lonlat, s2.coords)\n  );\n};\n\nexport const usePosition = () => {\n  const [position, setPosition] = useState({});\n  const [error, setError] = useState(null);\n\n  const onChange = ({ coords }) => {\n    setPosition({\n      latitude: coords.latitude,\n      longitude: coords.longitude,\n    });\n  };\n  const onError = (error) => {\n    setError(error.message);\n  };\n  useEffect(() => {\n    const geo = navigator.geolocation;\n    if (!geo) {\n      setError(\"Geolocation is not supported\");\n      return;\n    }\n    const watcher = geo.watchPosition(onChange, onError);\n    return () => geo.clearWatch(watcher);\n  }, []);\n  return { ...position, error };\n};\n\nexport { haversineDistance, findNearestStations };\n","import { useState } from \"react\";\nimport { Row, Form, Col, Alert, Button } from \"react-bootstrap\";\nimport { saveStation } from \"../lib/data\";\nconst UpdateForm = (props) => {\n  const { stationId } = props;\n  const [petrol, setPetrol] = useState(undefined);\n  const [diesel, setDiesel] = useState(undefined);\n  const [queue, setQueue] = useState(-5);\n  const [msg, setMsg] = useState(null);\n  if (msg) {\n    return (\n      <div className=\"submitForm\">\n        <Row>\n          <Col>\n            <Alert variant=\"success\">\n              Thank you for submitting this information. It will appear on the\n              website within the next 5 minutes.\n            </Alert>\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n  return (\n    <div className=\"submitForm\">\n      <Form\n        onSubmit={(e) => {\n          e.preventDefault();\n          console.log(e);\n          const data = {\n            id: stationId,\n            petrol,\n            diesel,\n            queue,\n          };\n          saveStation(data, () => {\n            setMsg(true);\n          });\n        }}\n      >\n        <Form.Group as={Row} className=\"mb-3\" controlId=\"formPetrol\">\n          <Form.Label column sm=\"4\">\n            Is there Petrol?\n          </Form.Label>\n          <Col sm=\"8\">\n            <Form.Check\n              inline\n              label=\"Yes\"\n              name=\"petrol\"\n              type=\"radio\"\n              id=\"petrol-check-yes\"\n              checked={petrol === true}\n              onChange={(value) => setPetrol(true)}\n            />\n            <Form.Check\n              inline\n              label=\"No\"\n              name=\"petrol\"\n              type=\"radio\"\n              id=\"petrol-check-no\"\n              checked={petrol === false}\n              onChange={(value) => setPetrol(false)}\n            />\n            <Form.Check\n              inline\n              label=\"Don't know\"\n              name=\"petrol\"\n              type=\"radio\"\n              id=\"petrol-check-dontknow\"\n              checked={petrol === undefined}\n              onChange={(value) => setPetrol(undefined)}\n            />\n          </Col>\n        </Form.Group>\n\n        <Form.Group as={Row} className=\"mb-3\" controlId=\"formDiesel\">\n          <Form.Label column sm=\"4\">\n            Is there Diesel?\n          </Form.Label>\n          <Col sm=\"8\">\n            <Form.Check\n              inline\n              label=\"Yes\"\n              name=\"diesel\"\n              type=\"radio\"\n              id=\"diesel-check-yes\"\n              checked={diesel === true}\n              onChange={(value) => setDiesel(true)}\n            />\n            <Form.Check\n              inline\n              label=\"No\"\n              name=\"diesel\"\n              type=\"radio\"\n              id=\"diesel-check-no\"\n              checked={diesel === false}\n              onChange={(value) => setDiesel(false)}\n            />\n            <Form.Check\n              inline\n              label=\"Don't know\"\n              name=\"diesel\"\n              type=\"radio\"\n              id=\"diesel-check-dontknow\"\n              checked={diesel === undefined}\n              onChange={(value) => setDiesel(undefined)}\n            />\n          </Col>\n        </Form.Group>\n\n        <Form.Group as={Row} className=\"mb-3\" controlId=\"formQueue\">\n          <Form.Label column sm=\"4\">\n            How long is the queue in minutes, your guess?\n          </Form.Label>\n          <Col sm=\"8\">\n            <Form.Range\n              min=\"-5\"\n              max=\"120\"\n              value={queue}\n              step={5}\n              onChange={(event) => {\n                setQueue(event.target.value);\n              }}\n            />\n            {queue >= 0 ? `${queue} minute(s)` : \"No idea\"}\n          </Col>\n        </Form.Group>\n        <Button variant=\"primary\" type=\"submit\">\n          Submit\n        </Button>\n      </Form>\n    </div>\n  );\n};\n\nexport { UpdateForm };\n","import { Row, Col, Badge, Button } from \"react-bootstrap\";\nimport { useState } from \"react\";\nimport { haversineDistance } from \"../lib/geo\";\nimport { UpdateForm } from \"./UpdateForm\";\n\n/**\n * -1: confident there is no fuel\n * 0: not sure\n * 1: confident there is fuel\n * @param {*} m5\n * @param {*} m30\n * @returns\n */\nconst getFuelConfidenceScore = (m5, m30) => {\n  const m5_total = m5.yes + m5.no;\n\n  const m30_total = m30.yes + m30.no;\n  const m5_strength = 1 - 1 / Math.pow(3, m5_total);\n  const m30_strength = 1 - 1 / Math.pow(3, m30_total);\n\n  if (m30_total === 0) return 0;\n  return (\n    0.3 * m5_strength * (m5_total > 0 ? (m5.yes - m5.no) / m5_total : 0) +\n    0.7 * m30_strength * (m30_total > 0 ? (m30.yes - m30.no) / m30_total : 0)\n  );\n};\n\nconst getLabelForConfidence = (confidence) => {\n  const label = confidence < 0 ? \"no\" : \"yes\";\n  if (Math.abs(confidence) < 0.1) return [\"Don't know\", \"secondary\"];\n  if (Math.abs(confidence) < 0.4) return [`Not sure`, \"warning\"];\n  if (Math.abs(confidence) < 0.7)\n    return [`Probably ${label}`, confidence < 0 ? \"danger\" : \"success\"];\n  return [label, confidence < 0 ? \"danger\" : \"success\"];\n};\n\nconst StationRow = (props) => {\n  const { id, coords, name, last_update, phone, address, stats } =\n    props.station;\n  const [isFormVisible, setFormVisible] = useState(false);\n  const distance = haversineDistance(coords, props.userLocation);\n  const myGmapsLocation = [props.userLocation[1], props.userLocation[0]];\n  const mapUrl = `https://www.google.com/maps/dir/${myGmapsLocation}/${coords[1]},${coords[0]}`;\n  // console.log(stats);\n  const dieselConfidence = getFuelConfidenceScore(\n    stats[\"300\"][\"diesel\"],\n    stats[\"1800\"][\"diesel\"]\n  );\n  const [dieselLabel, dieselVariant] = getLabelForConfidence(dieselConfidence);\n  const petrolConfidence = getFuelConfidenceScore(\n    stats[\"300\"][\"petrol\"],\n    stats[\"1800\"][\"petrol\"]\n  );\n  const [petrolLabel, petrolVariant] = getLabelForConfidence(petrolConfidence);\n\n  /*\n  Possible states:\n  - yes\n  - no\n  - maybe\n  - information outdated\n  \n  */\n  // console.log(last_update);\n  const lastUpdate = Math.round(\n    (new Date().getTime() / 1000 - last_update) / 60\n  );\n  return (\n    <div className=\"station\">\n      <Row>\n        <Col>\n          {name || address || \"unnamed\"}\n          <br />\n          <small>\n            <a href={mapUrl}>{Math.ceil(distance * 100) / 100} miles away</a>\n          </small>\n        </Col>\n        <Col>\n          <div className=\"stationInfo\">\n            Diesel:\n            <Badge bg={dieselVariant}>{dieselLabel}</Badge>\n            <br />\n            Petrol:\n            <Badge bg={petrolVariant}>{petrolLabel}</Badge>\n            <br />\n            <div className=\"lastUpdate\">last update {lastUpdate}m ago</div>\n          </div>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          {phone && (\n            <Button size=\"sm\" variant=\"info\" href={`tel://${phone}`}>\n              Call them: {phone}\n            </Button>\n          )}\n        </Col>\n        <Col>\n          <Button\n            size=\"sm\"\n            variant=\"warning\"\n            onClick={(e) => setFormVisible(!isFormVisible)}\n          >\n            {isFormVisible ? \"Hide\" : \"Send Update\"}\n          </Button>\n        </Col>\n      </Row>\n      {isFormVisible && <UpdateForm stationId={id} />}\n    </div>\n  );\n};\n\nexport { StationRow };\n","import { StationRow } from \"./StationRow\";\n\nconst StationList = (props) => {\n  const { userLocation, stations, lastUpdate } = props;\n  const updateMinutesAgo = Math.ceil(\n    (new Date().getTime() / 1000 - lastUpdate) / 60\n  );\n  const stationElemennts = stations.map((station) => (\n    <StationRow\n      key={station.id}\n      station={station}\n      userLocation={userLocation}\n    />\n  ));\n  return (\n    <div className=\"stationList\">\n      <div>Last update: {updateMinutesAgo} minutes ago</div>\n      {stationElemennts}\n    </div>\n  );\n};\n\nexport { StationList };\n","import { useState, useEffect } from \"react\";\nimport { loadStations } from \"./lib/data\";\nimport { usePosition, findNearestStations } from \"./lib/geo\";\nimport { Container, Row, Col, Alert } from \"react-bootstrap\";\nimport { StationList } from \"./components/StationList\";\n\nconst RADIUS = 8;\n\nfunction App() {\n  const [stations, setStations] = useState(null);\n  const [nearestStations, setNearestStations] = useState(null);\n  const [loadError, setLoadError] = useState(null);\n  const { latitude, longitude, error } = usePosition();\n  useEffect(() => {\n    loadStations((result) => setStations(result.data), setLoadError);\n  }, []);\n\n  useEffect(() => {\n    setNearestStations(\n      stations && latitude && longitude\n        ? {\n            lastUpdate: stations.last_update,\n            stationData: findNearestStations(\n              [longitude, latitude],\n              stations.station_data,\n              RADIUS\n            ),\n          }\n        : null\n    );\n  }, [stations, latitude, longitude]);\n\n  var content = null;\n  if (!stations) {\n    if (loadError) {\n      content = <Alert>Coulnd't load stations. Error happened.</Alert>;\n    } else content = <Alert>Loading stations...</Alert>;\n  }\n  if (!latitude) {\n    if (error) {\n      content = <Alert>Coulnd't get your location.</Alert>;\n    }\n    content = <Alert>Getting your location</Alert>;\n  }\n\n  if (!content && nearestStations) {\n    content = (\n      <StationList\n        userLocation={[longitude, latitude]}\n        stations={nearestStations.stationData}\n        lastUpdate={stations.last_update}\n      />\n    );\n  }\n  return (\n    <Container>\n      <Row>\n        <Col>\n          <h1>FuelFinder.uk</h1>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <h2>Nearest Stations</h2>\n          {content}\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}